# app.pycode = '''import pandas as pdimport gradio as grfrom mistralai.client import MistralClientfrom mistralai.models.chat_completion import ChatMessage# --- Load and chunk the data ---df = df.head(200)chunk_size = 200chunks = [df.iloc[i:i+chunk_size] for i in range(0, len(df), chunk_size)]# --- Mistral setup ---api_key = "9PDH3aipDWdurbfFlJmNioY9XKhNTndM"model = "mistral-large-latest"client = MistralClient(api_key=api_key)system_prompt = ChatMessage(    role="system",    content=(         "You are an AI concierge assistant who only answers questions related to DOT airline data. "         "You must refuse to answer any questions outside airline data uploaded via df such as unrelated topics (e.g., politics, travel places, technology, sports and others). "        "If the user asks something unrelated to airline data, politely respond: "        "'I'm here to help only with questions about airline DOT data.' "        "Use clear, empathetic language and always stay on-topic as a pediatric guidance assistant."    ))# --- Search function (basic) ---def find_relevant_chunks(question, top_n=3):    relevant = []    q_lower = question.lower()    for i, chunk in enumerate(chunks):        text = chunk.to_string(index=False).lower()        if any(word in text for word in q_lower.split()):            relevant.append((i, text))        if len(relevant) >= top_n:            break    return relevant# --- Mistral Q&A ---def ask_mistral_airline(question):    try:        relevant_chunks = find_relevant_chunks(question)        if not relevant_chunks:            return "No relevant data found for your question."        combined_data = "\n\n".join([chunk for _, chunk in relevant_chunks])        context = (            "You are a data assistant answering questions using the DOT airline dataset.\n"            "Below are relevant rows from the dataset:\n\n"            f"{combined_data}\n\n"            "Only use this data to answer the following question:"        )        response = client.chat(            model=model,            messages=[                ChatMessage(role="system", content=context),                ChatMessage(role="user", content=question)            ]        )        return response.choices[0].message.content    except Exception as e:        return f"Error: {str(e)}"iface = gr.Interface(    fn=ask_mistral_airline,    inputs=gr.Textbox(lines=2, placeholder="Ask about DOT airline data..."),    outputs="text",    title="✈️ Mistral AI - DOT Airline Data Concierge",    description=(        "Ask questions about a Sample airline DOT dataset (1000+ rows).\n\n"        "**Here are some sample questions to run:**\n"        "**– What are total passenger count between JFK and LAX airports?**\n"        "**– Tell me airport code for the City Peach Springs, AZ**\n"        "**– What all carriers operate between EWR and LAX airports?**\n"        "**– What is average delay between IAD and ORD airports?**\n"        "**– Compare passenger count between origin JFK to destination LAX airport "        "and origin LAX to destination JFK airport?.**"    ))iface.launch()'''with open("app.py", "w") as f:    f.write(code)